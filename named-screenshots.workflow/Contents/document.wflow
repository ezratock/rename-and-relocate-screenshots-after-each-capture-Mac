<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>AMApplicationBuild</key>
	<string>523</string>
	<key>AMApplicationVersion</key>
	<string>2.10</string>
	<key>AMDocumentVersion</key>
	<string>2</string>
	<key>actions</key>
	<array>
		<dict>
			<key>action</key>
			<dict>
				<key>AMAccepts</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Optional</key>
					<true/>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>AMActionVersion</key>
				<string>1.0.2</string>
				<key>AMApplication</key>
				<array>
					<string>Automator</string>
				</array>
				<key>AMParameterProperties</key>
				<dict>
					<key>source</key>
					<dict/>
				</dict>
				<key>AMProvides</key>
				<dict>
					<key>Container</key>
					<string>List</string>
					<key>Types</key>
					<array>
						<string>com.apple.applescript.object</string>
					</array>
				</dict>
				<key>ActionBundlePath</key>
				<string>/System/Library/Automator/Run AppleScript.action</string>
				<key>ActionName</key>
				<string>Run AppleScript</string>
				<key>ActionParameters</key>
				<dict>
					<key>source</key>
					<string>on invalidName(inputString)	--colon, forward slash, backward slash, and double quote not allowed due to special meaning	set allowedCharacters to "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ01234567891234567890_- .'()[]{}&lt;&gt;;?|+=!#@$%^&amp;*"		if inputString is "" then		return true	end if		repeat with i from 1 to length of inputString		set currentCharacter to character i of inputString		if currentCharacter is not in allowedCharacters then			return true		end if	end repeat		return falseend invalidNameon invalidLocation(folderPath, fileName)	set fullPath to folderPath &amp; fileName	tell application "System Events"		return exists file fullPath	end tellend invalidLocationon nextAvail(folderPath, fileName)	set fullPath to folderPath &amp; fileName &amp; " "	tell application "System Events"		set rtrn to 2		repeat while exists file (fullPath &amp; (rtrn as text))			set rtrn to (rtrn + 1)		end repeat		return " " &amp; (rtrn as text)	end tellend nextAvailon run {input, parameters}	set defaultName to "Screenshot " &amp; (do shell script "date +'%Y-%m-%d at %I.%M.%S %p'")	set homeDir to (path to home folder) as text	set tempPath to (POSIX path of homeDir) &amp; ".screenshot-function/screenshot.png"	try		set defaultLocation to do shell script "defaults read com.apple.screencapture location"	on error		set defaultLocation to (POSIX path of homeDir) &amp; "Desktop"	end try		set dirExists to do shell script "[ -d " &amp; quoted form of ((POSIX path of homeDir) &amp; ".screenshot-function") &amp; " ] &amp;&amp; echo true || echo false"	if dirExists is "false" then		do shell script "mkdir " &amp; quoted form of ((POSIX path of homeDir) &amp; ".screenshot-function")	end if		--catch error if there is already a ~/.screenshot-function/screenshot.png	set fileExists to do shell script "[ -e " &amp; quoted form of tempPath &amp; " ] &amp;&amp; echo 'true' || echo 'false'"	if fileExists is "true" then		display dialog "ERROR
	
Either the script is already running or there is a 'screenshot.png' file in the ~/.screenshot-function directory causing problems.

Please finish out the script and/or delete or move the file before running the script again.

To delete or move the file, you can open spotlight search (command + spacebar), type in: ~/.screenshot-function (tilde slash dot screenshot dash function), double click the resulting folder, and then delete or move the 'screenshot' file." buttons {"OK"} default button "OK"		return	end if		--take screenshot	do shell script "screencapture -i " &amp; quoted form of tempPath	set fileExists to do shell script "[ -e " &amp; quoted form of tempPath &amp; " ] &amp;&amp; echo 'true' || echo 'false'"	if fileExists is "false" then		return	end if		--get new name	set userInput to text returned of (display dialog "Screenshot Name:" default answer defaultName buttons {"OK"} default button "OK")	repeat while invalidName(userInput)		set userInput to text returned of (display dialog "INVALID FILE NAMENew Screenshot Name:" default answer defaultName buttons {"OK"} default button "OK")	end repeat		--get new location	set chosenFolder to ""	repeat until chosenFolder is not ""		try			set chosenFolder to choose folder with prompt "Screenshot Location:" default location defaultLocation		on error			set chosenFolder to ""		end try	end repeat		--if name already exists in location, prompt user to change name	repeat while invalidLocation(POSIX path of chosenFolder, userInput)		set userInput to text returned of (display dialog "FILE NAME ALREADY EXISTS IN THAT LOCATION
New Screenshot Name:" default answer userInput &amp; nextAvail(POSIX path of chosenFolder, userInput) buttons {"OK"} default button "OK")		repeat while invalidName(userInput)			set userInput to text returned of (display dialog "INVALID FILE NAMENew Screenshot Name:" default answer defaultName buttons {"OK"} default button "OK")		end repeat	end repeat		--update file	do shell script "mv " &amp; quoted form of ((POSIX path of homeDir) &amp; ".screenshot-function/screenshot.png") &amp; " " &amp; quoted form of ((POSIX path of homeDir) &amp; ".screenshot-function/" &amp; userInput &amp; ".png")	tell application "Finder"		move homeDir &amp; ".screenshot-function:" &amp; userInput &amp; ".png" to chosenFolder	end tellend run</string>
				</dict>
				<key>BundleIdentifier</key>
				<string>com.apple.Automator.RunScript</string>
				<key>CFBundleVersion</key>
				<string>1.0.2</string>
				<key>CanShowSelectedItemsWhenRun</key>
				<false/>
				<key>CanShowWhenRun</key>
				<true/>
				<key>Category</key>
				<array>
					<string>AMCategoryUtilities</string>
				</array>
				<key>Class Name</key>
				<string>RunScriptAction</string>
				<key>InputUUID</key>
				<string>F211D0C8-0D88-465D-B613-C2F8239C9A09</string>
				<key>Keywords</key>
				<array>
					<string>Run</string>
				</array>
				<key>OutputUUID</key>
				<string>6C468323-B857-4F8E-B47A-88E3F236B7A0</string>
				<key>UUID</key>
				<string>B570CFE9-7A69-48C6-A383-D01F42FB4990</string>
				<key>UnlocalizedApplications</key>
				<array>
					<string>Automator</string>
				</array>
				<key>arguments</key>
				<dict>
					<key>0</key>
					<dict>
						<key>default value</key>
						<string>on run {input, parameters}
	
	(* Your script goes here *)
	
	return input
end run</string>
						<key>name</key>
						<string>source</string>
						<key>required</key>
						<string>0</string>
						<key>type</key>
						<string>0</string>
						<key>uuid</key>
						<string>0</string>
					</dict>
				</dict>
				<key>isViewVisible</key>
				<integer>1</integer>
				<key>location</key>
				<string>450.500000:728.000000</string>
				<key>nibPath</key>
				<string>/System/Library/Automator/Run AppleScript.action/Contents/Resources/Base.lproj/main.nib</string>
			</dict>
			<key>isViewVisible</key>
			<integer>1</integer>
		</dict>
	</array>
	<key>connectors</key>
	<dict/>
	<key>workflowMetaData</key>
	<dict>
		<key>applicationBundleIDsByPath</key>
		<dict/>
		<key>applicationPaths</key>
		<array/>
		<key>inputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>outputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>presentationMode</key>
		<integer>11</integer>
		<key>processesInput</key>
		<false/>
		<key>serviceInputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceOutputTypeIdentifier</key>
		<string>com.apple.Automator.nothing</string>
		<key>serviceProcessesInput</key>
		<false/>
		<key>systemImageName</key>
		<string>NSActionTemplate</string>
		<key>useAutomaticInputType</key>
		<true/>
		<key>workflowTypeIdentifier</key>
		<string>com.apple.Automator.servicesMenu</string>
	</dict>
</dict>
</plist>
